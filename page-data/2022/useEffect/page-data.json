{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/useEffect/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"6bf5f9b7-32f7-5782-8379-95dcd68a479e","excerpt":"useEffect ? useEffect를 사용하면 를 컴포넌트에서 수행할 수 있다. side effect가 뭔데... side effect라고 하는 것은 렌더링 후에 부수적으로 실행되어야 하는 작업들이다.\n예를 들어 데이터 가져오기나 구독(subscription…","html":"<h1>useEffect ?</h1>\n<p>useEffect를 사용하면 <code class=\"language-text\">side effect</code>를 컴포넌트에서 수행할 수 있다.</p>\n<h2>side effect가 뭔데...</h2>\n<p>side effect라고 하는 것은 렌더링 후에 부수적으로 실행되어야 하는 작업들이다.\n예를 들어 데이터 가져오기나 구독(subscription) 설정하기 같은 것들.\n그냥 줄여서 <code class=\"language-text\">effect</code>라고 부르기도 한다.</p>\n<h2>useEffect가 하는 일</h2>\n<p>useEffect 훅은 우리가 넘긴 함수를 기억해놓고 DOM 렌더링 후에 함수를 실행시켜준다.</p>\n<h2>useEffect를 왜 컴포넌트 안에서 부를까?</h2>\n<p>useEffect 훅을 컴포넌트 내에 둠으로써 특별한 API 없이 prop이나 state에 쉽게 접근할 수 있다.</p>\n<h2>useEffect는 렌더링 이후에 매번 실행된다.</h2>\n<p>기본적으로 첫번째 렌더링과 그 이후에 일어나는 업데이트 때마다 실행된다.\n필요에 따라 실행될 수 있도록 만들 수 있다.\neffect함수가 실행되는 시점에는 DOM 렌더링이 완료되었다는 것을 보장할 수 있다.</p>\n<h2>clean-up 함수</h2>\n<p>말 그대로 정리 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FriendStatus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOnline<span class=\"token punctuation\">,</span> setIsOnline<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handleStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsOnline</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span>isOnline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">subscribeToFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// effect 이후에 어떻게 정리(clean-up)할 것인지 표시합니다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ChatAPI<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribeFromFriendStatus</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> handleStatusChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnline <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Loading...\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> isOnline <span class=\"token operator\">?</span> <span class=\"token string\">\"Online\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Offline\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 함수가 호출되는 시점은 <strong>컴포넌트가 unmount될 때</strong>이다.\n다음의 effect를 실행하기 전에 이전의 effect를 정리한다.\n일관성을 유지해주기 때문에 버그를 방지할 수 있다.</p>","frontmatter":{"title":"useEffect","date":"September 06, 2022","description":"useEffect 분명 한 번 배웠는데 이것저것 헷갈린다. 그래서 다시 공부해봤다!","tags":["React"]}},"previous":{"fields":{"slug":"/2022/TogeFit/"},"frontmatter":{"title":"TogeFit"}},"next":{"fields":{"slug":"/2022/comma-operator/"},"frontmatter":{"title":"쉼표 (,) 연산자"}}},"pageContext":{"id":"6bf5f9b7-32f7-5782-8379-95dcd68a479e","previousPostId":"8252ac58-fb87-5257-909e-fb553a5f8790","nextPostId":"6acc1251-b747-58ba-8b6a-0a90034e7a95"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}