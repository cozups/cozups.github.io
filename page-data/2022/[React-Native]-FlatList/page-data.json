{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/[React-Native]-FlatList/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"87ec01cf-e754-51de-93d2-25d6aaa950e7","excerpt":"새로운 프로젝트에 합류하게 되면서 React Native를 독학하게 되었다. (현재는 무산됨..)\n여러 요소들을 렌더링 하는 방법 중 ScrollView와 비슷하지만 좀 더 효율적인 FlatList…","html":"<p>새로운 프로젝트에 합류하게 되면서 React Native를 독학하게 되었다. (현재는 무산됨..)\n여러 요소들을 렌더링 하는 방법 중 ScrollView와 비슷하지만 좀 더 효율적인 FlatList를 알게 되었고, 자꾸 까먹는 것 같아 여기에 다시 정리하면서 기억해보려고 한다.</p>\n<h1>ScrollView vs FlatList</h1>\n<p><code class=\"language-text\">ScrollView</code>는 화면에 표시될 콘텐츠를 한번에 다 렌더링한다.\n반면에, <code class=\"language-text\">FlatList</code>는 전체 콘텐츠를 한번에 다 렌더링하기 보다는 <strong>지금 현재 보고 있는 스크린에 나타날 콘텐츠</strong>만 렌더링하고 나머지는 사용자가 스크롤할때마다 렌더링하는 방식을 사용한다.</p>\n<p>즉, 1000개의 데이터가 있을 때 <code class=\"language-text\">ScrollView</code>는 1000개를 한번에 다 불러오기 때문에 성능 상의 이슈가 발생할 수 있다. <code class=\"language-text\">FlatList</code>는 이 중에 몇개만 불러오고 나머지는 필요할 때마다 불러오기 때문에 <code class=\"language-text\">ScrollView</code>보다 효율적이다.</p>\n<h1>FlatList 사용법</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> View<span class=\"token punctuation\">,</span> FlatList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> 'react<span class=\"token operator\">-</span>native`<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dataToRendered <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> elem1<span class=\"token punctuation\">,</span> elem2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">someComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span>\n    \t<span class=\"token operator\">&lt;</span>FlatList\n        \tdata<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataToRendered<span class=\"token punctuation\">}</span>\n            renderItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            keyExtractor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>View<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> someComponent<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>기본 틀은 위와 같다.\n다른 요소와 마찬가지로 <code class=\"language-text\">FlatList</code>를 import하여 사용하면 된다.</p>\n<ul>\n<li>data: <code class=\"language-text\">FlatList</code>에 출력할 데이터</li>\n<li>renderItem: 개별 항목을 렌더링 할 함수</li>\n<li>keyExtractor: 데이터 객체에서 <code class=\"language-text\">FlatList</code>가 알아서 key를 찾아 넣어주지만, 데이터가 객체가 아닌 경우에는 <code class=\"language-text\">keyExtractor</code>를 사용하여 key를 넣어주어야 한다. <code class=\"language-text\">keyExtractor</code>에 들어갈 값도 함수이다.</li>\n</ul>\n<p>그 외의 속성들에 대하여 알고 싶다면 공식 문서를 찾아보자.\n<a href=\"https://reactnative.dev/docs/flatlist\">React Native FlatList</a></p>","frontmatter":{"title":"[React Native] FlatList","date":"October 06, 2022","description":"ScrollView와 비슷하지만 좀 더 효율적인 FlatList","tags":["React Native"]}},"previous":{"fields":{"slug":"/2022/comma-operator/"},"frontmatter":{"title":"쉼표 (,) 연산자"}},"next":{"fields":{"slug":"/2022/object-by-constructor-first-class-object/"},"frontmatter":{"title":"1. 생성자 함수에 의한 객체 생성과 일급 객체"}}},"pageContext":{"id":"87ec01cf-e754-51de-93d2-25d6aaa950e7","previousPostId":"6acc1251-b747-58ba-8b6a-0a90034e7a95","nextPostId":"ab7599be-eb65-5479-bade-86188b05f4f8"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}