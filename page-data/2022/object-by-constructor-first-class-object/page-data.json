{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/object-by-constructor-first-class-object/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"ab7599be-eb65-5479-bade-86188b05f4f8","excerpt":"객체 생성 방식 객체 리터럴 생성자 함수 생성자 함수를 이용하여 객체 생성하기 1. Object 생성자 함수  연산자와 함께  생성자를 이용하면 빈 객체를 생성하여 반환한다. 생성자 함수에 의해 생성된 객체를 인스턴스라 한다. 생성자 함수의 종류 , , , , , , ,  등…","html":"<h1>객체 생성 방식</h1>\n<ul>\n<li>객체 리터럴</li>\n<li>생성자 함수</li>\n</ul>\n<h1>생성자 함수를 이용하여 객체 생성하기</h1>\n<h2>1. Object 생성자 함수</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 빈 객체 생성</span>\n\n<span class=\"token comment\">// 프로퍼티 및 메서드 추가</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi! My name is \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {name: 'Lee', sayHello: function}</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hi! My name is Lee</span></code></pre></div>\n<p><code class=\"language-text\">new</code> 연산자와 함께 <code class=\"language-text\">Object</code> 생성자를 이용하면 빈 객체를 생성하여 반환한다.</p>\n<p>생성자 함수에 의해 생성된 객체를 <strong>인스턴스</strong>라 한다.</p>\n<ul>\n<li>생성자 함수의 종류\n<ul>\n<li><code class=\"language-text\">String</code>, <code class=\"language-text\">Number</code>, <code class=\"language-text\">Boolean</code>, <code class=\"language-text\">Function</code>, <code class=\"language-text\">Array</code>, <code class=\"language-text\">Date</code>, <code class=\"language-text\">RegExp</code>, <code class=\"language-text\">Promise</code> 등</li>\n</ul>\n</li>\n</ul>\n<h2>2. 객체 리터럴을 이용한 객체 생성 방식의 문제점</h2>\n<p>객체를 생성할 때, 반드시 <code class=\"language-text\">Object</code> 생성자 함수를 이용해 객체를 생성할 필요는 없다.</p>\n<p>객체 리터럴을 이용하여 객체를 생성하는 것이 더 직관적이고 간편하다.</p>\n<p>그러나, <strong>객체 리터럴</strong>을 이용하여 객체를 생성하는 방식은 <strong>단 하나의 객체만 생성</strong>한다.</p>\n<p>그렇기 때문에 동일한 프로퍼티를 갖는 <strong>객체를 여러 개 생성해야 하는 경우 매번 같은 프로퍼티를 기술해야하기 때문에</strong> 비효율적이다.</p>\n<p>객체 리터럴에 의해 객체를 생성하는 경우 프로퍼티 구조가 동일함에도 불구하고 매번 같은 프로퍼티와 메서드를 기술해야 하므로 수십 개의 객체를 생성해야 하는 경우 문제가 크다.</p>\n<p>🎈 예제</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> circle1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">radius</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getDiameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle1<span class=\"token punctuation\">.</span><span class=\"token function\">getDiameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\n\n<span class=\"token keyword\">const</span> circle2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">radius</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getDiameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle2<span class=\"token punctuation\">.</span><span class=\"token function\">getDiameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span></code></pre></div>\n<h2>3. 그렇다면 생성자 함수에 의한 객체 생성 방식의 장점은?</h2>\n<p>객체(인스턴스)를 생성하기 위한 템플릿(클래스)처럼 <strong>프로퍼티 구조가 동일한 객체 여러 개를 간편하게 생성</strong>할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 생성자 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getDiameter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 인스턴스의 생성</span>\n<span class=\"token keyword\">const</span> circle1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 반지름 5짜리 Circle 객체 생성</span>\n<span class=\"token keyword\">const</span> circle2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 반지름 10짜리 Circle 객체 생성</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span></code></pre></div>\n<p>💡 this</p>\n<p><code class=\"language-text\">this</code>는 객체 자신의 프로퍼티나 메서드를 참조하기 위한 <strong>자기 참조 변수</strong>이다.\nthis 바인딩은 함수 호출 방식에 따라 동적으로 결정된다.</p>\n<table>\n<thead>\n<tr>\n<th>함수 호출 방식</th>\n<th>this가 가리키는 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>일반 함수 호출</td>\n<td>전역 객체 (브라우저 - window, Node.js - global)</td>\n</tr>\n<tr>\n<td>메서드 호출</td>\n<td>메서드를 호출한 객체</td>\n</tr>\n<tr>\n<td>생성자 함수로서 호출</td>\n<td>생성자 함수가 생성할 인스턴스</td>\n</tr>\n</tbody>\n</table>\n<p>자바와 같은 클래스 기반 객체지향 언어의 생성자와는 다르게 형식이 정해져 있지 않고, 일반 함수와 동일한 방법으로 생성자 함수를 정의하고 <strong><code class=\"language-text\">new</code> 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작한다.</strong></p>\n<h2>4. 생성자 함수의 인스턴스 생성 과정</h2>\n<p>생성자 함수의 역할</p>\n<ul>\n<li>구조가 동일한 인스턴스를 생성하기 위한 템플릿(클래스)으로서 인스턴스 생성</li>\n<li>생성된 인스턴스 초기화 (인스턴스 프로퍼티 추가 및 초기값 할당)</li>\n</ul>\n<p>자바스크립트 엔진은 다음과 같은 과정을 거쳐 암묵적으로 인스턴스를 생성하고 초기화한다.</p>\n<h3>인스턴스 생성과 this 바인딩</h3>\n<p>런타임 이전에,</p>\n<ol>\n<li>생성자 함수에 의해 빈 객체가 암묵적으로 생성되고, 이것이 인스턴스가 된다.</li>\n<li>인스턴스는 this에 바인딩 된다.</li>\n</ol>\n<h3>인스턴스 초기화</h3>\n<ol>\n<li>생성자 함수에 기술되어 있는 코드가 한 줄씩 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다.</li>\n<li>즉, 인스턴스에 프로퍼티나 메서드를 추가하고 초기값을 인스턴스에 프로퍼티에 할당하여 초기화하거나 고정값을 할당한다.</li>\n</ol>\n<h3>인스턴스 반환</h3>\n<p>생성자 함수 내부에서 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this를 암묵적으로 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 생성자 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1. 암묵적으로 빈 객체 생성 + this 바인딩</span>\n\n  <span class=\"token comment\">// 2. 인스턴스 초기화</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getDiameter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 3. 완성된 인스턴스가 바인딩된 this 반환</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 인스턴스 생성. Circle 함수는 암묵적으로 this 반환</span>\n<span class=\"token keyword\">const</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Circle {radius: 1, getDiameter: function}</span></code></pre></div>\n<p>인스턴스 반환 시, this가 아닌 다른 객체를 명시적으로 반환하면 this가 반환되지 못하고 return 문에 명시한 객체가 반환된다.</p>\n<p>그러나 원시 값을 명시적으로 반환하는 경우, 원시 값 반환은 무시되고 this가 반환된다.</p>\n<p>명시적으로 this가 아닌 다른 값을 반환하는 것은 생성자 함수의 기본 동작을 훼손하므로 생성자 함수 내부에서 return 문을 반드시 생략해야 한다.</p>\n<h3>new 연산자를 사용하지 않는다면?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getDiameter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// new 연산자와 함께 호출하지 않으면 생성자 함수로서 동작하지 않는다.</span>\n<span class=\"token comment\">// 즉, 일반 함수로서 호출되므로 circle3에 반환되는 값이 없다.</span>\n<span class=\"token keyword\">const</span> circle3 <span class=\"token operator\">=</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15 (일반 함수로서 호출된 Circle의 this는 전역 객체를 가리킴)</span></code></pre></div>\n<p><code class=\"language-text\">new</code> 연산자와 함께 호출하지 않으면 생성자 함수로서 동작하지 않는다.</p>\n<p>생성자 함수로서 동작하지 않으므로 인스턴스가 생성되지 않는다.</p>\n<p>일반 함수와 생성자 함수의 구분을 위해 생성자 함수는 파스칼 케이스(첫 글자 대문자)로 명명한다.</p>\n<ul>\n<li><code class=\"language-text\">new.target</code>\n<ul>\n<li>생성자 함수가 <code class=\"language-text\">new</code> 연산자 없이 호출되는 위험성을 회피하기 위해 사용한다.\n<code class=\"language-text\">new</code> 연산자와 함께 생성자 함수로서 호출되면 <code class=\"language-text\">new.target</code>은 함수 자신을 가리킨다.\n<code class=\"language-text\">new</code> 연산자 없이 일반 함수로서 호출된 경우 <code class=\"language-text\">new.target</code>은 undefined이다.\n이를 이용하여 <code class=\"language-text\">new.target</code>이 undefined인 경우 재귀적으로 <code class=\"language-text\">new 생성자함수</code> 를 호출하여 인스턴스를 반환하게 만들 수 있다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getDiameter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다만, IE에서는 <code class=\"language-text\">new.target</code>을 지원하지 않으므로 스코프 세이프 생성자 패턴을 사용할 수 있다.\n자바스크립트 엔진이 암묵적으로 인스턴스를 만들고 this에 바인딩하는 것을 이용한 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> instanceOf Circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getDiameter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> radius<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1>일급 객체</h1>\n<p>함수가 일급 객체이다. = 함수를 객체와 동일하게 사용할 수 있다.</p>\n<h2>일급 객체의 조건</h2>\n<ol>\n<li>무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성될 수 있다.</li>\n<li>변수나 자료구조(객체, 배열 등)에 저장할 수 있다.</li>\n<li><strong>함수의 매개변수에 전달될 수 있다.</strong></li>\n<li><strong>함수의 반환값으로 사용할 수 있다.</strong></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 무명의 리터럴로 생성</span>\n<span class=\"token comment\">// 2. 변수에 저장</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrease</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 객체에 저장</span>\n<span class=\"token keyword\">const</span> auxs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> increase<span class=\"token punctuation\">,</span> decrease <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3. 매개변수에 전달</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aux</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 4. 반환값으로 사용</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    num <span class=\"token operator\">=</span> <span class=\"token function\">aux</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> increser <span class=\"token operator\">=</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span>auxs<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">increaser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">increaser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token keyword\">const</span> decreaser <span class=\"token operator\">=</span> <span class=\"token function\">makeCounter</span><span class=\"token punctuation\">(</span>auxs<span class=\"token punctuation\">.</span>decrease<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">decreaser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">decreaser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -2</span></code></pre></div>\n<p>함수가 매개변수로 전달 가능하고, 반환 값으로 사용된다는 특징에 의하여 함수형 프로그래밍을 가능케 한다.</p>\n<h2>함수형 프로그래밍</h2>\n<p><strong>순수 함수를 통해 부수효과를 최대한 억제하여 오류를 피하고 프로그램의 안전성을 높이려는 프로그래밍 패러다임</strong></p>\n<ol>\n<li>순수 함수\n<ul>\n<li>외부 상태에 의존하지도 않고 외부 상태를 변경하지도 않는 부수효과가 없는 함수</li>\n</ul>\n</li>\n<li>비상태, 불변성\n<ul>\n<li>함수형 프로그래밍에서 데이터는 불변성을 유지해야 한다.</li>\n</ul>\n</li>\n<li>선언형 함수</li>\n<li>일급 객체와 고차함수</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1급 객체</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTwo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">multiplyTwo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">transform</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">numbers</span> <span class=\"token operator\">=></span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>addTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>multiplyTwo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [6, 8, 10, 12]</span></code></pre></div>\n<p><strong>고차함수</strong> - <strong>함수를 인자로 받거나 결과로 반환하는 함수</strong></p>\n<p><a href=\"https://jongminfire.dev/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\">https://jongminfire.dev/함수형-프로그래밍이란</a></p>\n<p>일반 객체와의 차이점으로는</p>\n<ul>\n<li>함수는 일반 객체와 다르게 호출할 수 있다.</li>\n<li>일반 객체에는 없는 고유한 프로퍼티를 소유한다.</li>\n</ul>","frontmatter":{"title":"1. 생성자 함수에 의한 객체 생성과 일급 객체","date":"November 01, 2022","description":"모던 자바스크립트 Deep Dive [17장][18장]","tags":["Javascript","모던 자바스크립트 Deep Dive"]}},"previous":{"fields":{"slug":"/2022/[React-Native]-FlatList/"},"frontmatter":{"title":"[React Native] FlatList"}},"next":{"fields":{"slug":"/2022/Spread-destructuring/"},"frontmatter":{"title":"2. Spread 문법과 destructuring 할당"}}},"pageContext":{"id":"ab7599be-eb65-5479-bade-86188b05f4f8","previousPostId":"87ec01cf-e754-51de-93d2-25d6aaa950e7","nextPostId":"bfebc8e1-d1a3-5f30-8d62-d0c0e8fc9bec"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}