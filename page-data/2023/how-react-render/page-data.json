{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/how-react-render/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"5231210c-ca5d-5d9d-b1ac-42851a98ba58","excerpt":"Render and Commit – React Understanding Reconciliation: React Rendering Phases UI를 보여주는 3가지 단계 렌더링 트리거 컴포넌트 렌더링 하기 DOM에 commit 하기 Step 1. 렌더링 트리거 렌더링을 해야 하는…","html":"<p><a href=\"https://react.dev/learn/render-and-commit\">Render and Commit – React</a></p>\n<p><a href=\"https://dev.to/thee_divide/reconciliation-react-rendering-phases-56g2\">Understanding Reconciliation: React Rendering Phases</a></p>\n<h1>UI를 보여주는 3가지 단계</h1>\n<ol>\n<li>렌더링 트리거</li>\n<li>컴포넌트 렌더링 하기</li>\n<li>DOM에 commit 하기</li>\n</ol>\n<h1>Step 1. 렌더링 트리거</h1>\n<p>렌더링을 해야 하는 2가지 경우</p>\n<ul>\n<li>초기 렌더링</li>\n<li>state 업데이트에 따른 리렌더링</li>\n</ul>\n<h2>초기 렌더링</h2>\n<p>타겟 DOM 노드에 <code class=\"language-text\">createRoot</code> 메서드를 호출하고 <code class=\"language-text\">render</code> 메서드를 호출하여 렌더링을 시작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Image <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Image.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Image <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>State 업데이트에 따른 리렌더링</h2>\n<p><code class=\"language-text\">useState</code>의 setter 함수나 <code class=\"language-text\">useReducer</code>의 dispatch 함수에 의해 상태가 변경되어 업데이트가 필요한 경우 리렌더링을 발생시킨다.</p>\n<h1>Step 2. 컴포넌트 렌더링</h1>\n<blockquote>\n<p><strong>“Rendering” is React calling your components.</strong></p>\n</blockquote>\n<p>렌더링은 리액트가 컴포넌트를 화면에 출력하기 위해 호출하는 것을 의미한다.</p>\n<ul>\n<li>초기 렌더링을 할 때, root 컴포넌트를 호출한다.</li>\n<li>리렌더링을 할 때, 렌더링을 트리거한 함수 컴포넌트를 호출한다.</li>\n</ul>\n<p>렌더링 과정은 재귀적이다. 컴포넌트가 다른 컴포넌트를 리턴한다면 리액트는 그 컴포넌트들을 렌더링할 것이다. 중첩되는 컴포넌트가 없을 때까지 리액트는 계속해서 이 과정을 반복한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> Gallery <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Gallery.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Gallery <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Gallery.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Gallery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>section<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Inspiring Sculptures<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Image <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Image <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Image <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>img\n      src<span class=\"token operator\">=</span><span class=\"token string\">\"https://i.imgur.com/ZF6s192.jpg\"</span>\n      alt<span class=\"token operator\">=</span><span class=\"token string\">\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>초기 렌더링 단계에서는 <code class=\"language-text\">&lt;section></code>, <code class=\"language-text\">&lt;h1></code>, <code class=\"language-text\">&lt;img></code> 태그에 대한 DOM 노드를 생성한다.</li>\n<li>리렌더링을 할 때, React는 이전 렌더링과 비교하여 어떤 프로퍼티가 변경되었는지 확인한다. <strong>commit phase로 넘어가기 전까지 이 정보로 아무 작업도 하지 않는다.</strong>\n<ul>\n<li>모든 컴포넌트를 체크하지 않고 state나 props가 변경되는 경우 flag를 사용하여 컴포넌트에 표시한다.</li>\n<li>실제 DOM에 적용해야 하는 변경 사항 리스트를 생성한다.</li>\n</ul>\n</li>\n</ul>\n<h1>Step 3. 변경 사항을 DOM에 commit 하기</h1>\n<p>컴포넌트를 호출한 이후에 React는 DOM을 수정시킨다.</p>\n<ul>\n<li>초기 렌더링을 할 때, 모든 DOM 노드를 스크린에 표시하기 위하여 <code class=\"language-text\">appendChild()</code> DOM API를 실행한다.</li>\n<li>리렌더링을 할 때, DOM 노드에 변경 사항을 반영하기 위해 필요한 최소한의 작업을 실행한다.\n<ul>\n<li>렌더링 과정에서 생성된 변경 사항 리스트를 바탕으로 부분적으로가 아니라 한 번에 신속하게 변경한다. <strong>(batch update)</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>React는 이전 렌더링 결과와 다음 렌더링 결과 사이에 차이점이 존재할 때만 DOM 노드를 변경한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Clock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> time <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>time<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>매 초마다 time prop이 바뀌어 리렌더링을 일으키는 컴포넌트를 생각해보자.</p>\n<p>이 경우에 input에 값을 입력해도 input에 담긴 값이 사라지지 않는다. 그 이유는 React가 time을 표시하는 <code class=\"language-text\">&lt;h1></code>태그에 대한 업데이트만 진행하기 때문이다.</p>\n<h1>Step 4. 브라우저에 표시하기</h1>\n<p>React가 DOM을 변경한 후에 브라우저는 스크린을 리페인트한다.</p>","frontmatter":{"title":"React의 렌더링 과정","date":"November 01, 2023","description":"React의 render phase와 commit phase","tags":["React"]}},"previous":{"fields":{"slug":"/2023/neetcode-Tree/"},"frontmatter":{"title":"[니트코드 Blind 75] Tree"}},"next":{"fields":{"slug":"/2023/react-key-uuid/"},"frontmatter":{"title":"[React] key에 uuid를 사용하는 것은 좋은 선택이 아니다."}}},"pageContext":{"id":"5231210c-ca5d-5d9d-b1ac-42851a98ba58","previousPostId":"a9bbe2a7-c38a-5756-98bf-0d7c721b2912","nextPostId":"046b98d1-c784-572a-bbc1-4777464fdb06"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}