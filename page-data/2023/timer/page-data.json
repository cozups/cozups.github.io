{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/timer/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"063e2854-77eb-57dd-99c7-b7121e2d3d38","excerpt":"호출 스케줄링 함수를 명시적으로 호출하지 않고 일정 시간이 경과된 이후에 호출되도록 호출을 예약하려면 타이머 함수를 사용한다. 이를 호출 스케줄링이라 한다. 타이머 함수는 호스트 객체이다. 브라우저 환경과 Node.js 환경에서의 전역 객체의 메서드 setTimeout…","html":"<h1>호출 스케줄링</h1>\n<p>함수를 명시적으로 호출하지 않고 일정 시간이 경과된 이후에 호출되도록 호출을 예약하려면 타이머 함수를 사용한다.</p>\n<p>이를 호출 스케줄링이라 한다.</p>\n<p>타이머 함수는 호스트 객체이다.</p>\n<ul>\n<li>브라우저 환경과 Node.js 환경에서의 전역 객체의 메서드</li>\n<li>setTimeout, setInterval</li>\n</ul>\n<hr>\n<h1>타이머 함수</h1>\n<h2>1. setTimeout / clearTimeout</h2>\n<p>전달 받은 시간으로 단 한 번 동작하는 타이머를 생성한다.</p>\n<p>타이머가 만료되면 첫 번째 인수로 전달받은 콜백 함수가 호출된다.</p>\n<h3>매개변수</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> timeoutId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">|</span>code<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>func\n<ul>\n<li>타이머가 만료된 뒤 호출될 콜백 함수</li>\n</ul>\n</li>\n<li>delay\n<ul>\n<li>타이머 만료 시간(ms)</li>\n<li>기본 값 0</li>\n</ul>\n</li>\n<li>param1, param2, …\n<ul>\n<li>호출 스케줄링 된 콜백 함수에 전달해야 할 인수가 존재하는 경우 전달</li>\n</ul>\n</li>\n</ul>\n<p>setTimeout 함수는 생성된 타이머를 식별할 수 있는 고유한 타이머 id를 반환한다.</p>\n<p>이 id를 clearTimeout 함수의 인수로 전달하여 타이머를 취소할 수 있다.</p>\n<h2>2. setInterval / clearInterval</h2>\n<p>전달받은 시간으로 반복 동작하는 타이머를 생성한다.</p>\n<p>이후 타이머가 만료될 때마다 첫 번째 인수로 전달받은 콜백 함수가 반복 호출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">|</span>code<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>setInterval 함수는 생성된 타이머를 식별할 수 있는 고유한 타이머 id를 반환한다.</p>\n<p>이 id를 clearInterval 함수의 인수로 전달하여 타이머를 취소할 수 있다.</p>\n<hr>\n<h1>디바운스와 스로틀</h1>","frontmatter":{"title":"14. 타이머","date":"January 25, 2023","description":"모던 자바스크립트 Deep Dive [41장]","tags":["Javascript","모던 자바스크립트 Deep Dive"]}},"previous":{"fields":{"slug":"/2023/function/"},"frontmatter":{"title":"13. 함수"}},"next":{"fields":{"slug":"/2023/Ajax/"},"frontmatter":{"title":"17. Ajax"}}},"pageContext":{"id":"063e2854-77eb-57dd-99c7-b7121e2d3d38","previousPostId":"5748a358-b5d9-5f98-88af-8749d8d37b5d","nextPostId":"227b00e0-8441-5d67-aeaf-24cdb773abb0"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}