{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/useState-vs-useRef/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"2e3e2c76-44bb-5392-8ae4-cce53c613d70","excerpt":"둘 다 리액트에서 동적으로 상태를 관리할 수 있도록 해주는 훅이다. 다만, useRef를 사용하는 경우 컴포넌트 리렌더링을 하지 않는다. *Keep in mind that  doesn’t notify you when its content changes. Mutating the…","html":"<p>둘 다 리액트에서 동적으로 상태를 관리할 수 있도록 해주는 훅이다.</p>\n<p>다만, useRef를 사용하는 경우 컴포넌트 리렌더링을 하지 않는다.</p>\n<blockquote>\n<p>*Keep in mind that <code class=\"language-text\">useRef</code> doesn’t notify you when its content changes. <strong>Mutating the <code class=\"language-text\">.current</code> property doesn’t cause a re-render</strong>. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a <a href=\"https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\">callback ref</a> instead.</p>\n</blockquote>\n<p>cr:* <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\">https://reactjs.org/docs/hooks-reference.html#useref</a></p>\n<blockquote>\n</blockquote>\n<p>반면, useState는 setState 함수를 통해 상태를 업데이트하는 경우 리렌더링을 발생시킨다.</p>\n<blockquote>\n<p>*The <code class=\"language-text\">setState</code> function is used to update the state. <strong>It accepts a new state value and enqueues a re-render of the component.</strong></p>\n</blockquote>\n<p>cr:* <a href=\"https://reactjs.org/docs/hooks-reference.html#useState\">https://reactjs.org/docs/hooks-reference.html#useState</a></p>\n<blockquote>\n</blockquote>\n<p>따라서, 무엇을 사용할 지는 리렌더링의 필요 여부에 따라 결정하면 된다.</p>\n<ul>\n<li>리렌더링이 필요한 경우 → useState</li>\n<li>리렌더링이 필요하지 않은 경우 → useRef</li>\n</ul>","frontmatter":{"title":"useState vs useRef","date":"February 28, 2023","description":"useState와 useRef","tags":["React"]}},"previous":{"fields":{"slug":"/2023/typescript/"},"frontmatter":{"title":"[TypeScript] 1. 타입스크립트란?"}},"next":{"fields":{"slug":"/2023/Redux/"},"frontmatter":{"title":"Redux"}}},"pageContext":{"id":"2e3e2c76-44bb-5392-8ae4-cce53c613d70","previousPostId":"9e387586-0aa6-5d70-8cc1-dbe76314849a","nextPostId":"d5fd7095-ff84-5b46-8a40-152fb1101d9c"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}