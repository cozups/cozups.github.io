{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/neetcode-Binary-Search/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"07dc4c60-0014-5bb7-be9b-ae0528467324","excerpt":"1. Find Minimum in Rotated Sorted Array LeetCode - The World's Leading Online Programming Learning Platform 배열의 최솟값을 찾아 반환 하는 문제 단, O(logn…","html":"<h1>1. <strong>Find Minimum in Rotated Sorted Array</strong></h1>\n<p><a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/\">LeetCode - The World's Leading Online Programming Learning Platform</a></p>\n<p>배열의 최솟값을 찾아 반환 하는 문제</p>\n<p>단, O(logn)의 복잡도로 풀어야한다.</p>\n<p>주어지는 배열은 원래 오름차순이었던 배열을 오른쪽으로 1~n번 회전시킨 배열이다.</p>\n<p>내가 생각한 방법은</p>\n<ul>\n<li>중간 값이 오른쪽 값 보다 크다면\n<ul>\n<li>배열의 최솟값은 중간 값보다 오른쪽에 있을 것이므로 L값을 옮김</li>\n</ul>\n</li>\n<li>중간 값이 오른쪽 값 보다 작다면\n<ul>\n<li>중간 값 이전에 더 작은 숫자가 있을 수 있으므로 R값을 옮김</li>\n</ul>\n</li>\n</ul>\n<p>위 방법이다.</p>\n<ul>\n<li>\n<p>코드</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findMin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h1>2. <strong>Search in Rotated Sorted Array</strong></h1>\n<p><a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array/\">Search in Rotated Sorted Array - LeetCode</a></p>\n<p>회전된 오름차순 배열에서 특정 값의 인덱스를 찾는 문제</p>\n<p>접근법은 다음과 같다.</p>\n<ul>\n<li>\n<p>L = 왼쪽 값, R = 오른쪽 값, M = 중간 값</p>\n</li>\n<li>\n<p>M값이 타겟인지 확인한다. 이 경우 M 리턴</p>\n</li>\n<li>\n<p>M 값을 기준으로 타겟이 왼쪽 파트에 있는지 오른쪽 파트에 있는지 찾는다.</p>\n<ul>\n<li>왼쪽 파트에 있다면 R 값을 옮겨서 다시 탐색\n<ul>\n<li>nums[L] ≤ nums[M] 이면 왼쪽 파트는 정렬이 되어 있는 상태</li>\n<li>target > nums[M]이거나 target &#x3C; nums[L]이면 왼쪽 파트에 target이 없으므로 오른쪽 파트를 탐색해야 한다. ⇒ L = M + 1</li>\n<li>그 외에는 왼쪽 파트에 있는 것이므로 R = M - 1</li>\n</ul>\n</li>\n<li>오른쪽 파트에 있다면 L 값을 옮겨서 다시 검색\n<ul>\n<li>nums[L] ≤ nums[M]이 아니었다면 왼쪽 파트는 정렬이 되어 있지 않다. 그러므로 오른쪽 파트는 무조건 정렬이 되어 있다.</li>\n<li>target &#x3C; nums[M]이거나 target > nums[R]이면 왼쪽 파트를 탐색해야 한다. ⇒ R = M - 1</li>\n<li>그 외에는 오른쪽 파트에 있는 것이므로 L = M + 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>코드</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// left sorted portion</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        r <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// right sorted portion</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        r <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"[니트코드 Blind 75] Binary Search","date":"October 16, 2023","description":" ","tags":["Javascript","PS"]}},"previous":{"fields":{"slug":"/2023/neetcode-Sliding-Window/"},"frontmatter":{"title":"[니트코드 Blind 75] Sliding Window"}},"next":{"fields":{"slug":"/2023/neetcode-Linked-List/"},"frontmatter":{"title":"[니트코드 Blind 75] Linked List"}}},"pageContext":{"id":"07dc4c60-0014-5bb7-be9b-ae0528467324","previousPostId":"efe382ac-11f8-5230-a6a4-8bf19dc4bc70","nextPostId":"c95c47eb-a3c1-5497-be47-8ddf5f33918a"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}