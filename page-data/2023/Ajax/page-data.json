{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/Ajax/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"227b00e0-8441-5d67-aeaf-24cdb773abb0","excerpt":"Ajax란? 자바스크립트를 사용하여 브라우저가 서버에게 비동기 방식으로 데이터를 요청하고, 서버가 응답한 데이터를 수신하여 웹페이지를 동적으로 갱신하는 프로그래밍 방식 XMLHttpRequest 객체를 기반으로 동작한다. 이전의 웹 페이지는… 완전한 HTML…","html":"<h1>Ajax란?</h1>\n<p>자바스크립트를 사용하여 브라우저가 서버에게 비동기 방식으로 데이터를 요청하고, 서버가 응답한 데이터를 수신하여 웹페이지를 동적으로 갱신하는 프로그래밍 방식</p>\n<p>XMLHttpRequest 객체를 기반으로 동작한다.</p>\n<h3>이전의 웹 페이지는…</h3>\n<p>완전한 HTML을 서버로부터 전송받아 웹페이지 전체를 처음부터 다시 렌더링하는 방식</p>\n<p>→ 화면이 전환되면 서버로부터 새로운 HTML을 전송받아 웹페이지 전체를 처음부터 다시 렌더링</p>\n<p>따라서,</p>\n<ol>\n<li>변경할 필요가 없는 부분까지 포함된 완전한 HTML을 서버로부터 매번 다시 전송받기 때문에 불필요한 데이터 통신 발생</li>\n<li>변경할 필요가 없는 부분까지 처음부터 다시 렌더링 → 화면이 깜빡이는 현상</li>\n<li>클라이언트와 서버와의 통신이 동기 방식 → 서버로부터 응답이 있을 때까지 블로킹</li>\n</ol>\n<h3>Ajax의 등장</h3>\n<p>서버로부터 웹페이지의 변경에 필요한 데이터만 비동기 방식으로 전송받아 변경할 필요가 있는 부분만 한정적으로 렌더링하는 방식이 가능해졌다.</p>\n<p>전통적인 방식과 비교하여,</p>\n<ol>\n<li>변경할 부분을 갱신하는 데 필요한 데이터만 서버로부터 전송 → 불필요한 데이터 통신 미발생</li>\n<li>변경할 필요가 없는 부분은 다시 렌더링하지 않음 → 깜빡이는 현상 X</li>\n<li>클라이언트와 서버 간 비동기 방식 통신 → 블로킹 X</li>\n</ol>\n<hr>\n<h1>JSON</h1>\n<p>클라이언트와 서버 간의 HTTP 통신을 위한 텍스트 데이터 포맷</p>\n<h2>1. JSON 표기 방식</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"alive\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"hobby\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"traveling\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tennis\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>객체 리터럴과 유사하게 키와 값으로 구성된 순수한 텍스트</p>\n<p>그러나 JSON의 키는 반드시 큰따옴표로 묶어야 한다.</p>\n<h2>2. JSON.stringify</h2>\n<p>객체를 JSON 포맷의 문자열로 변환한다. (직렬화)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">alive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"traveling\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tennis\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체를 JSON 포맷의 문자열로 변환한다.</span>\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> json<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// string {\"name\":\"Lee\",\"age\":20,\"alive\":true,\"hobby\":[\"traveling\",\"tennis\"]}</span>\n\n<span class=\"token comment\">// 객체를 JSON 포맷의 문자열로 변환하면서 들여쓰기 한다.</span>\n<span class=\"token keyword\">const</span> prettyJson <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> prettyJson<span class=\"token punctuation\">,</span> prettyJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nstring {\n  \"name\": \"Lee\",\n  \"age\": 20,\n  \"alive\": true,\n  \"hobby\": [\n    \"traveling\",\n    \"tennis\"\n  ]\n}\n*/</span>\n\n<span class=\"token comment\">// replacer 함수. 값의 타입이 Number이면 필터링되어 반환되지 않는다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// undefined: 반환하지 않음</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// JSON.stringify 메서드에 두 번째 인수로 replacer 함수를 전달한다.</span>\n<span class=\"token keyword\">const</span> strFilteredObject <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> strFilteredObject<span class=\"token punctuation\">,</span> strFilteredObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nstring {\n  \"name\": \"Lee\",\n  \"alive\": true,\n  \"hobby\": [\n    \"traveling\",\n    \"tennis\"\n  ]\n}\n*/</span></code></pre></div>\n<p>객체뿐만 아니라 배열도 JSON 포맷의 문자열로 변환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Javascript\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 배열을 JSON 포맷의 문자열로 변환한다.</span>\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> json<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nstring [\n  {\n    \"id\": 1,\n    \"content\": \"HTML\",\n    \"completed\": false\n  },\n  {\n    \"id\": 2,\n    \"content\": \"CSS\",\n    \"completed\": true\n  },\n  {\n    \"id\": 3,\n    \"content\": \"Javascript\",\n    \"completed\": false\n  }\n]\n*/</span></code></pre></div>\n<h2>3. JSON.parse</h2>\n<p>JSON 포맷의 문자열을 객체로 변환한다. (역직렬화)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">alive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"traveling\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tennis\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체를 JSON 포맷의 문자열로 변환한다.</span>\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// JSON 포맷의 문자열을 객체로 변환한다.</span>\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> parsed<span class=\"token punctuation\">,</span> parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// object {name: \"Lee\", age: 20, alive: true, hobby: [\"traveling\", \"tennis\"]}</span></code></pre></div>\n<p>배열이 JSON 포맷의 문자열로 변환되어 있는 경우 JSON.parse는 문자열을 배열 객체로 변환한다.</p>\n<p>배열의 요소가 객체인 경우 배열의 요소까지 객체로 변환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Javascript\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 배열을 JSON 포맷의 문자열로 변환한다.</span>\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// JSON 포맷의 문자열을 배열로 변환한다. 배열의 요소까지 객체로 변환된다.</span>\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> parsed<span class=\"token punctuation\">,</span> parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n object [\n  { id: 1, content: 'HTML', completed: false },\n  { id: 2, content: 'CSS', completed: true },\n  { id: 3, content: 'Javascript', completed: false }\n]\n*/</span></code></pre></div>\n<hr>\n<h1>XMLHttpRequest</h1>\n<p>자바스크립트를 사용하여 HTTP 요청을 전송하기 위해 사용하는 객체</p>\n<p>브라우저에서 제공하는 Web API이다.</p>\n<h2>1. XMLHttpRequest 객체 생성</h2>\n<p>XMLHttpRequest 생성자 함수를 호출하여 생성한다.</p>\n<p>Web API이므로 브라우저 환경에서만 정상적으로 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// XMLHttpRequest 객체 생성</span>\n<span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>2. XMLHttpRequest 객체의 프로퍼티와 메서드</h2>\n<p>주요 프로퍼티만 정리. 나머지는 책 참고</p>\n<table>\n<thead>\n<tr>\n<th>프로토타입 프로퍼티</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>readyState</td>\n<td>HTTP 요청의 현재 상태를 나타내는 정수</td>\n</tr>\n<tr>\n<td>UNSENT: 0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4</td>\n<td></td>\n</tr>\n<tr>\n<td>status</td>\n<td>HTTP 요청에 대한 응답 상태를 나타내는 정수, ex) 200</td>\n</tr>\n<tr>\n<td>statusText</td>\n<td>HTTP 요청에 대한 응답 메시지를 나타내는 문자열, ex) “OK”</td>\n</tr>\n<tr>\n<td>responseType</td>\n<td>HTTP 응답 타입, ex) document, json, text, blob, arraybuffer</td>\n</tr>\n<tr>\n<td>response</td>\n<td>HTTP 요청에 대한 응답 몸체</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>이벤트 핸들러 프로퍼티</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onreadystatechange</td>\n<td>readyState 프로퍼티 값이 변경된 경우</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>HTTP 요청에 에러가 발생한 경우</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>HTTP 요청이 성공적으로 완료한 경우</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>메서드</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>open</td>\n<td>HTTP 요청 초기화</td>\n</tr>\n<tr>\n<td>send</td>\n<td>HTTP 요청 전송</td>\n</tr>\n<tr>\n<td>abort</td>\n<td>이미 전송된 HTTP 요청 중단</td>\n</tr>\n<tr>\n<td>setRequestHeader</td>\n<td>특정 HTTP 요청 헤더의 값을 설정</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>정적 프로퍼티</th>\n<th>값</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DONE</td>\n<td>4</td>\n<td>서버 응답 완료</td>\n</tr>\n</tbody>\n</table>\n<h2>3. HTTP 요청 전송</h2>\n<ol>\n<li><code class=\"language-text\">XMLHttpRequest.prototype.open</code> 메서드로 HTTP 요청 초기화</li>\n<li>필요에 따라 <code class=\"language-text\">XMLHttpRequest.prototype.setRequestHeader</code> 메서드로 특정 HTTP 요청의 헤더 값 설정</li>\n<li><code class=\"language-text\">XMLHttpRequest.prototype.send</code> 메서드로 HTTP 요청 전송</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// XMLHttpRequest 객체 생성</span>\n<span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 초기화</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 헤더 설정</span>\n<span class=\"token comment\">// 클라이언트가 서버로 전송할 데이터의 MIME 타입 지정: json</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 전송</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>open 메서드</h3>\n<p>서버에 전송할 HTTP 요청을 초기화한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> async<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>method: HTTP 요청 메서드 (”GET”, “POST”, “PUT”, “DELETE” 등)</li>\n<li>url: HTTP 요청을 전송할 URL</li>\n<li>async: 비동기 요청 여부, 기본값 true</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HTTP 요청 메서드</th>\n<th>종류</th>\n<th>목적</th>\n<th>페이로드</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>index/retrieve</td>\n<td>모든/특정 리소스 취득</td>\n<td>X</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>create</td>\n<td>리소스 생성</td>\n<td>O</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>replace</td>\n<td>리소스의 전체 교체</td>\n<td>O</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>modify</td>\n<td>리소스의 일부 수정</td>\n<td>O</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>delete</td>\n<td>모든/특정 리소스 삭제</td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<h3>send 메서드</h3>\n<p>open 메서드로 초기화된 HTTP 요청을 서버에 전송한다.</p>\n<p>기본적으로 서버로 전송하는 데이터는 GET, POST 요청 메서드에 따라 전송 방식에 차이가 있다.</p>\n<ul>\n<li>GET: 데이터를 URL의 일부분인 쿼리 문자열(query string)로 서버에 전송한다.</li>\n<li>POST: 데이터(페이로드)를 요청 몸체(request body)에 담아 전송한다.</li>\n</ul>\n<p>페이로드가 객체인 경우 JSON.stringify를 사용하여 직렬화한 후 전달해야 한다.</p>\n<p><strong>HTTP 요청 메서드가 GET인 경우 send 메서드에 페이로드로 전달한 인수는 무시되고 요청 몸체는 null로 설정된다.</strong></p>\n<h3>setRequestHeader 메서드</h3>\n<p>특정 HTTP 요청의 헤더 값을 설정한다.</p>\n<p>setRequestHeader 메서드는 반드시 open 메서드를 호출한 이후에 호출해야 한다.</p>\n<table>\n<thead>\n<tr>\n<th>MIME 타입</th>\n<th>서브타입</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>text/plain, text/html, text/css, text/javascript</td>\n</tr>\n<tr>\n<td>application</td>\n<td>application/json, application/x-www-form-urlencode</td>\n</tr>\n<tr>\n<td>multipart</td>\n<td>multipart/formed-data</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// XMLHttpRequest 객체 생성</span>\n<span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 초기화</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 헤더 설정</span>\n<span class=\"token comment\">// 클라이언트가 서버로 전송할 데이터의 MIME 타입 지정: json</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 전송</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">completed</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>HTTP 클라이언트가 서버에 요청할 때 서버가 응답할 데이터의 MIME 타입을 Accept로 지정할 수 있다.</p>\n<p>만약 Accept 헤더를 설정하지 않으면 send 메서드가 호출될 때 Accept 헤더가 <em>/</em> 로 전송된다.</p>\n<h2>4. HTTP 응답 처리</h2>\n<p>HTTP 요청의 현재 상태를 나타내는 readyState 프로퍼티 값이 변경된 경우 발생하는 readystatechange 이벤트를 캐치하여 HTTP 응답을 처리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// XMLHttpRequest 객체 생성</span>\n<span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 초기화</span>\n<span class=\"token comment\">// https://jsonplaceholder.typicode.com은 Fake REST API를 제공하는 서비스다.</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://jsonplaceholder.typicode.com/todos/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 전송</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// readystatechange 이벤트는 HTTP 요청의 현재 상태를 나타내는 readyState 프로퍼티가</span>\n<span class=\"token comment\">// 변경될 때마다 발생한다.</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// {userId: 1, id: 1, title: \"delectus aut autem\", completed: false}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> xhr<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> xhr<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>readystatechange 이벤트 대신 load 이벤트를 캐치해도 된다.</p>\n<p>load 이벤트는 HTTP 요청이 성공적으로 완료된 경우 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// XMLHttpRequest 객체 생성</span>\n<span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 초기화</span>\n<span class=\"token comment\">// https://jsonplaceholder.typicode.com은 Fake REST API를 제공하는 서비스다.</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://jsonplaceholder.typicode.com/todos/1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP 요청 전송</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// load 이벤트는 HTTP 요청이 성공적으로 완료된 경우 발생한다.</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// {userId: 1, id: 1, title: \"delectus aut autem\", completed: false}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> xhr<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> xhr<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"17. Ajax","date":"January 30, 2023","description":"모던 자바스크립트 Deep Dive [43장]","tags":["Javascript","모던 자바스크립트 Deep Dive"]}},"previous":{"fields":{"slug":"/2023/timer/"},"frontmatter":{"title":"14. 타이머"}},"next":{"fields":{"slug":"/2023/closure/"},"frontmatter":{"title":"16. 클로저"}}},"pageContext":{"id":"227b00e0-8441-5d67-aeaf-24cdb773abb0","previousPostId":"063e2854-77eb-57dd-99c7-b7121e2d3d38","nextPostId":"c4bab9c0-d137-5389-884f-56b03e3b5218"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}