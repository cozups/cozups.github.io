{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/js-input-output/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"9d45d207-e9f6-5f08-a9f8-ca8a667164d3","excerpt":"1. fs 모듈 사용하기 백준으로 문제 풀 때 참고: https://www.youtube.com/watch?v=5xTHp0wgilU&t=165s 2. readline 모듈 사용하기 ⇒ fs 모듈을 사용하는 것이 편하다.","html":"<h2>1. fs 모듈 사용하기</h2>\n<p>백준으로 문제 풀 때</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 백준은 linux 환경임.</span>\n<span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">===</span> <span class=\"token string\">\"linux\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"/dev/stdin\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"./input.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 테스트 케이스 개수가 숫자로 주어지는 경우</span>\n<span class=\"token keyword\">const</span> inputC <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inputTestCase <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> inputC<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 테스트 케이스 입력받고 가공 후 inputTestCase에 넣는 과정</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> testCase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// solution 작성</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>inputC<span class=\"token punctuation\">,</span> inputTestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고: <a href=\"https://www.youtube.com/watch?v=5xTHp0wgilU&#x26;t=165s\">https://www.youtube.com/watch?v=5xTHp0wgilU&#x26;t=165s</a></p>\n<h2>2. readline 모듈 사용하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 줄 바꿈이 입력 될 때 마다 발</span>\n\n\t<span class=\"token comment\">// line을 가공하여 변수에 저장</span>\n\t<span class=\"token operator\">...</span>\n\n\t<span class=\"token comment\">// close로 넘어감</span>\n\trl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 저장된 변수를 이용하여 계산 후 출력</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>⇒ fs 모듈을 사용하는 것이 편하다.</p>","frontmatter":{"title":"자바스크립트 입출력","date":"February 10, 2023","description":"PS 하려고 할 때마다 까먹는 입출력...","tags":["Javascript","PS"]}},"previous":{"fields":{"slug":"/2023/Context-API/"},"frontmatter":{"title":"Context API"}},"next":{"fields":{"slug":"/2023/radix-sort/"},"frontmatter":{"title":"기수 정렬"}}},"pageContext":{"id":"9d45d207-e9f6-5f08-a9f8-ca8a667164d3","previousPostId":"084c8009-1572-5626-a59f-30cdc470ad9d","nextPostId":"3a392057-a3e5-591d-9073-26fdac3e7bb3"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}