{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/Intersection-Observer/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"c494d23f-3cc9-5cad-8c75-ca9eb7dd85d9","excerpt":"1. Intersection Observer Intersection Observer는 JavaScript API…","html":"<h1>1. Intersection Observer</h1>\n<p>Intersection Observer는 JavaScript API로, 엘리먼트가 화면 상에 표시되는지 여부를 확인하고 엘리먼트와 뷰포트 간 교차영역을 관찰한다.</p>\n<ul>\n<li>엘리먼트가 화면에 표시되고 있는 경우: 엘리먼트의 일부 또는 전체가 뷰포트 내에 있으면 교차 영역이 발생한다.</li>\n<li>엘리먼트가 화면에서 완전히 사라진 경우: 엘리먼트가 뷰포트 밖에 있는 경우 교차 영역은 없다.</li>\n<li>엘리먼트의 일부가 뷰포트 내에 있는 경우: 엘리먼트의 상단, 하단, 좌측, 우측 중 하나가 뷰포트와 겹치면 교차 영역으로 간주된다.</li>\n</ul>\n<h2>1. 사용법</h2>\n<ol>\n<li>\n<p>Intersection Observer 객체 생성하기</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong><code class=\"language-text\">callback</code></strong>: 교차 영역 변경 시 호출되는 콜백 함수</li>\n<li><strong><code class=\"language-text\">options</code></strong>: 관찰 설정을 정의하는 객체. 필요에 따라 <strong><code class=\"language-text\">root</code></strong>, <strong><code class=\"language-text\">rootMargin</code></strong>, <strong><code class=\"language-text\">threshold</code></strong> 등을 설정할 수 있다.\n<ul>\n<li><code class=\"language-text\">root</code>: 타겟 엘리먼트가 교차 영역을 계산할 때 기준이 되는 엘리먼트. 기본값은 뷰포트</li>\n<li><code class=\"language-text\">rootMargin</code>\n<ul>\n<li>교차 영역을 확장하거나 축소하는 마진 값. 기본값은 \"0px 0px 0px 0px”</li>\n<li>양수 - 교차 영역 확대, 음수 - 교차 영역 축소</li>\n<li><strong>무한 스크롤 및 lazy loading에 유용</strong>하다.\n<ul>\n<li>페이지 끝에 도달하기 전에 리소스 요청을 보낼 수 있기 때문</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">threshold</code>: 콜백 함수가 호출되는 조건을 지정하는 교차 영역의 임계값(0.0부터 1.0 사이).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>관찰 대상 엘리먼트 등록</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>콜백 함수 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 교차 영역에 진입한 경우</span>\n      <span class=\"token comment\">// 원하는 동작 수행</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 교차 영역에서 벗어난 경우</span>\n      <span class=\"token comment\">// 원하는 동작 수행</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong><code class=\"language-text\">entries</code></strong>: 관찰 대상 엘리먼트의 교차 영역 정보를 담고 있는 배열. 각 엔트리는 <strong><code class=\"language-text\">isIntersecting</code></strong> 속성을 통해 현재 교차 상태를 확인할 수 있다.</li>\n<li><strong><code class=\"language-text\">observer</code></strong>: Intersection Observer 객체 자체를 참조</li>\n</ul>\n</li>\n</ol>\n<h3>예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">entries<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 교차 영역에 진입한 경우</span>\n      entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 교차 영역에서 벗어난 경우</span>\n      entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rootMargin</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> targets <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntargets<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span> <span class=\"token operator\">=></span> observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>2. <strong>IntersectionObserverEntry</strong></h2>\n<p>Intersection Observer의 콜백 함수에서 전달되는 <strong><code class=\"language-text\">entries</code></strong> 매개변수는 교차 영역 정보를 담고 있는 객체의 배열이다.</p>\n<p>console.log를 찍어보면 아래와 같은 정보를 얻을 수 있다.</p>\n<p><img src=\"Intersection%20Observer%20ba406d495208472199f01ee9adf72001/Untitled.png\" alt=\"Untitled\"></p>\n<ul>\n<li><strong><code class=\"language-text\">target</code></strong>: 교차 영역 정보를 제공하는 대상 엘리먼트를 나타낸다. 콜백 함수에서 **<code class=\"language-text\">entry.target</code>**을 통해 엘리먼트를 참조할 수 있다.</li>\n<li><strong><code class=\"language-text\">boundingClientRect</code></strong>: 엘리먼트의 크기와 위치에 대한 정보를 담고 있는 <strong><code class=\"language-text\">DOMRect</code></strong> 객체이다. **<code class=\"language-text\">entry.boundingClientRect</code>**를 통해 엘리먼트의 크기와 위치를 알 수 있다.</li>\n<li><strong><code class=\"language-text\">intersectionRatio</code></strong>: 엘리먼트의 교차 영역 비율을 나타내는 숫자이다. **<code class=\"language-text\">0.0</code>**은 엘리먼트가 전혀 보이지 않음을 의미하고, **<code class=\"language-text\">1.0</code>**은 엘리먼트가 전체적으로 보이는 것을 의미한다.</li>\n<li><strong><code class=\"language-text\">intersectionRect</code></strong>: 교차 영역의 크기와 위치에 대한 정보를 담고 있는 <strong><code class=\"language-text\">DOMRect</code></strong> 객체이다. **<code class=\"language-text\">entry.intersectionRect</code>**를 통해 교차 영역의 크기와 위치를 알 수 있다.</li>\n<li><strong><code class=\"language-text\">isIntersecting</code></strong>: 엘리먼트가 현재 교차 영역에 들어와 있는지 여부를 나타내는 부울 값이다. **<code class=\"language-text\">true</code>**는 엘리먼트가 교차 영역에 진입한 상태를 의미하고, **<code class=\"language-text\">false</code>**는 교차 영역에서 벗어난 상태를 의미한다.</li>\n<li><strong><code class=\"language-text\">rootBounds</code></strong>: 교차 영역 계산 시 사용된 뷰포트(루트)의 크기와 위치에 대한 정보를 담고 있는 <strong><code class=\"language-text\">DOMRect</code></strong> 객체이다. **<code class=\"language-text\">entry.rootBounds</code>**를 통해 뷰포트의 크기와 위치를 알 수 있다.</li>\n</ul>\n<p><a href=\"https://codepen.io/cozups/pen/qBQYLMm\">https://codepen.io/cozups/pen/qBQYLMm</a></p>","frontmatter":{"title":"Intersection Observer","date":"July 19, 2023","description":"스크롤 이벤트와 성능을 위해 사용하는 Intersection Observer API","tags":["Javascript"]}},"previous":{"fields":{"slug":"/2023/custom-event/"},"frontmatter":{"title":"커스텀 이벤트"}},"next":{"fields":{"slug":"/2023/neetcode-Arrays-Hashing/"},"frontmatter":{"title":"[니트코드 Blind 75] Arrays & Hashing"}}},"pageContext":{"id":"c494d23f-3cc9-5cad-8c75-ca9eb7dd85d9","previousPostId":"fb8d8f28-630a-53f8-aec5-a955128ed48c","nextPostId":"91654657-0d05-5ac3-941e-a6494ed973aa"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}