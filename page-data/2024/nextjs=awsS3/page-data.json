{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024/nextjs=awsS3/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"cadfe5f5-726e-5815-a19d-269f16f7bcfc","excerpt":"예전에 팀 프로젝트를 진행했을 때 이미지를 저장하는 방법으로 두 가지 방법을 사용해보았다. 로컬 서버에 이미지 저장하기 AWS S3 스토리지에 이미지 저장하기 로컬 서버에 이미지를 저장하는 것보다는 AWS S…","html":"<p>예전에 팀 프로젝트를 진행했을 때 이미지를 저장하는 방법으로 두 가지 방법을 사용해보았다.</p>\n<ul>\n<li>로컬 서버에 이미지 저장하기</li>\n<li>AWS S3 스토리지에 이미지 저장하기</li>\n</ul>\n<p>로컬 서버에 이미지를 저장하는 것보다는 AWS S3 스토리지를 이용하는 것이 장점이 더 많다고 느껴졌다. 로컬 서버에 이미지를 저장하는 방법은 웹 개발을 처음 시작하며 만든 첫 프로젝트에서 사용했는데, 당시에는 테스트 환경이 제대로 갖춰지지 않아 테스트도 수동으로 진행되었다. 그 결과, 개발 환경에서 저장한 이미지가 배포 환경 서버에는 존재하지 않아 이미지가 제대로 출력되지 않고 엑스박스가 표시되는 문제를 경험했다. 이러한 환경적 문제뿐만 아니라, 클라우드 스토리지를 이용해 이미지를 다루는 방법이 더 널리 사용되고 있어 이를 공부해보고 싶었다. 이전 프로젝트에서 AWS S3 스토리지를 사용한 경험이 있지만, 다른 팀원이 구현했기 때문에 직접 구현해보는 기회가 없었다.</p>\n<h1>1. AWS S3 세팅</h1>\n<p><a href=\"https://medium.com/@givvemeee/upload-image-to-aws-s3-bucket-with-next-js-ccfe35e1de1c\">블로그 글</a>을 참고하여 AWS 콘솔에서 버킷을 생성하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_REGION=\nAWS_BUCKET_NAME=</code></pre></div>\n<p><code class=\"language-text\">.env</code> 파일에 AWS 스토리지와 관련된 변수들을 세팅한다. 세팅 방법도 위 블로그에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> S3Client <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@aws-sdk/client-s3\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Bucket <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">AWS_BUCKET_NAME</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">S3Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  credentials<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    accessKeyId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">AWS_ACCESS_KEY_ID</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n    secretAccessKey<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  region<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">AWS_REGION</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 후에 S3을 세팅하는 파일을 작성한다.</p>\n<h1>2. 이미지 업로드/삭제 커맨드 작성</h1>\n<p>이미지를 저장/삭제하는 route handler를 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Bucket<span class=\"token punctuation\">,</span> s3 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/app/lib/s3'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> prisma <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/app/lib/prisma'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createRandomString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/app/utils'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PutObjectCommand<span class=\"token punctuation\">,</span> DeleteObjectCommand <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@aws-sdk/client-s3'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextRequest<span class=\"token punctuation\">,</span> NextResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/server'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/auth'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">POST</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> NextRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 프로필 이미지 관련 코드</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token string\">'stickers'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 스티커 이미지 관련 코드</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> <span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 단일 이미지 저장 관련 코드</span>\n    <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">formData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> formData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> File<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">IMG_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">createRandomString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> objectUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">uploadImageToS3</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token string\">'Upload success.'</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> objectUrl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">201</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token constant\">DELETE</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> NextRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteObjectCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      Bucket<span class=\"token punctuation\">,</span>\n      Key<span class=\"token operator\">:</span> filename<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> s3<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'DELETE image failed.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> NextResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> result<span class=\"token operator\">:</span> <span class=\"token string\">'DELETE image success.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">201</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">uploadImageToS3</span><span class=\"token punctuation\">(</span>fileName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> file<span class=\"token operator\">:</span> File<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fileBuffer <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> uploadCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PutObjectCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    Bucket<span class=\"token punctuation\">,</span>\n    Key<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    Body<span class=\"token operator\">:</span> fileBuffer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> s3<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>uploadCommand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> objectUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Bucket<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.s3.amazonaws.com/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> objectUrl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DeleteImageFromS3</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> deletePrevCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteObjectCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      Bucket<span class=\"token punctuation\">,</span>\n      Key<span class=\"token operator\">:</span> key<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> s3<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>deletePrevCommand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이 곳에서 s3을 import 하고 <code class=\"language-text\">PutObjectCommand</code>, <code class=\"language-text\">DeleteObjectCommand</code>를 이용하여 이미지를 S3 클라우드에 저장하고 삭제한다.</p>\n<ul>\n<li>request body로 전달받은 formData에서 이미지 파일을 가져와 커맨드를 작성한다.</li>\n<li>이미지 파일 이름은 중복을 피하기 위해 <code class=\"language-text\">IMG_</code> 뒤에 랜덤 문자열을 붙인다.</li>\n<li>이미지 삭제는 이미지 파일 키(이름)을 전달한다.\n<ul>\n<li>request body 속 url은 S3에 업로드 된 이미지 파일 링크이기 때문에 이름을 따로 추출하는 작업이 필요하다. <code class=\"language-text\">const filename = url.split('/').slice(-1)[0];</code></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://github.com/cozups/sticker-diary/blob/master/src/app/api/images/route.ts\">전체 코드</a> (아직 리팩토링 전이라 중복되는 로직이 존재할 수 있음)</p>\n<h1>3. 이미지를 다루는 작업이 필요한 경우?</h1>\n<p>모든 이미지 데이터는 formData로 전달된다.</p>\n<p>기본적인 추가/수정/삭제 로직은 같다.</p>\n<ul>\n<li>추가: 단일 이미지를 저장한다.</li>\n<li>수정: 기존의 이미지를 삭제하고 수정된 이미지를 저장한다.</li>\n<li>삭제: 기존의 이미지를 삭제한다.</li>\n</ul>\n<ol>\n<li>프로필 이미지의 추가/수정/삭제</li>\n<li>스티커 이미지의 추가/수정</li>\n<li>일기 이미지의 추가/수정/삭제</li>\n</ol>\n<h2>프로필 이미지</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> onSubmit<span class=\"token operator\">:</span> SubmitHandler<span class=\"token operator\">&lt;</span>EditFormInput<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n    data<span class=\"token operator\">:</span> EditFormInput\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> session<span class=\"token operator\">?.</span>user<span class=\"token operator\">?.</span>image <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이미지를 제외한 사용자 데이터 수정 로직</span>\n    <span class=\"token operator\">...</span>\n\n\t<span class=\"token comment\">// 이미지 관련 로직</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imageInputRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span>files<span class=\"token operator\">?.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> imageFile<span class=\"token operator\">:</span> File <span class=\"token operator\">=</span> imageInputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> prevProfileImage <span class=\"token operator\">=</span> session<span class=\"token operator\">?.</span>user<span class=\"token operator\">?.</span>image<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// upload image</span>\n      <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> session<span class=\"token operator\">?.</span>user<span class=\"token operator\">?.</span>email <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> imageFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> uploadImageResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/images?target=profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> formData<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> uploadImageResponse<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      data<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// delete previous image</span>\n      <span class=\"token keyword\">const</span> deleteImageResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/images'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        method<span class=\"token operator\">:</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">,</span>\n        headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          url<span class=\"token operator\">:</span> prevProfileImage<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> newSession <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>session<span class=\"token punctuation\">,</span>\n      user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>session<span class=\"token operator\">?.</span>user<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        image<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>newSession<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>사용자가 input 요소에 삽입한 이미지가 있다면 가져온다.</li>\n<li>이전에 저장된 프로필 이미지가 있다면 변수에 저장한다.</li>\n<li>formData에 사용자의 email과 이미지 파일을 추가하고 request body로 전달한다.</li>\n<li>S3 스토리지에 추가된 이미지의 링크를 response로 받아 업데이트 할 <code class=\"language-text\">data</code>객체에 추가한다.</li>\n<li>이전에 저장되었던 프로필 이미지는 더 이상 사용되지 않으므로 삭제한다.</li>\n<li>세션을 업데이트한다.</li>\n</ol>\n<h2>스티커 이미지</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>stickers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/images?target=stickers\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> formData<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> updatedStickers <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> newSession <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>session<span class=\"token punctuation\">,</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>session<span class=\"token operator\">?.</span>user<span class=\"token punctuation\">,</span>\n      stickers<span class=\"token operator\">:</span> updatedStickers<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>newSession<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li><code class=\"language-text\">stickers</code>에는 사용자가 새로 삽입한 이미지들이 배열로 저장되어있다.</li>\n<li>이를 formData에 추가하고 request body로 전달한다.</li>\n<li>기존의 이미지가 삭제되고 새로운 이미지가 저장되는 작업은 route handler 안에서 이루어진다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// in /api/images/route.ts</span>\n<span class=\"token keyword\">const</span> savedStickers <span class=\"token operator\">=</span> userData<span class=\"token punctuation\">.</span>stickers <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// delete prevSticker and upload new sticker</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> formData<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// delete previous Sticker</span>\n  <span class=\"token keyword\">const</span> deleteKey <span class=\"token operator\">=</span> savedStickers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">DeleteImageFromS3</span><span class=\"token punctuation\">(</span>deleteKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// upload new Sticker</span>\n  <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> formData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> File<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">STK_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">createRandomString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> objectUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">uploadImageToS3</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  stickers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> objectUrl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// update sticker url to DB</span>\n<span class=\"token keyword\">const</span> updated <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> prisma<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    stickers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>savedStickers<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>stickers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>수정 사항이 없는 스티커들은 그대로 놔두고 request body로 전달 받은 스티커들만 수정하면 되므로 <code class=\"language-text\">for (const key of formData.keys())</code>구문으로 처리한다.\n<ul>\n<li><code class=\"language-text\">key</code>: 'best', 'good', 'soso', 'bad', 'worst'로 이 다섯 가지만 다룬다.</li>\n<li>만약 사용자가 'best', 'good', 'bad'만 새로 수정했다면 formData는 'best', 'good', 'bad'에 대한 이미지 파일을 갖는 형태일 것이다.</li>\n</ul>\n</li>\n<li>업데이트 된 스티커 링크들을 response로 받아 세션을 업데이트한다.</li>\n</ol>\n<h2>일기 이미지</h2>\n<p>일기 부분은 Quill 에디터를 사용하였기 때문에 로직이 좀 더 특별한데 이에 대한 자세한 사항은 따로 글을 작성하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> onSubmit<span class=\"token operator\">:</span> SubmitHandler<span class=\"token operator\">&lt;</span>Diary<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> Diary<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previewRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> imageNodes<span class=\"token operator\">:</span> NodeListOf<span class=\"token operator\">&lt;</span>HTMLImageElement<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n      previewRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> imageSrcs <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>imageNodes<span class=\"token punctuation\">,</span> img <span class=\"token operator\">=></span> img<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> imageFiles <span class=\"token operator\">=</span> imageSrcs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">=></span> <span class=\"token function\">base64ToFile</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n      imageFiles<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/images?target=image\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> formData<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        imageNodes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">.</span>contents <span class=\"token operator\">=</span> previewRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/diary\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>data<span class=\"token punctuation\">,</span>\n        date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span>selectedDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dashboard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>사용자가 추가한 이미지들을 배열로 받아 formData에 추가하고 request body로 전달한다.</li>\n<li>업로드 된 이미지 링크를 response로 받아 이미지 요소의 src를 수정한다.\n<ul>\n<li>수정하는 이유는 Quill에서 이미지를 base64형태로 인코딩하여 src에 저장하기 때문이다.</li>\n<li>긴 문자열을 가진 src를 갖는 이미지 태그 자체를 DB에 저장하는 것은 좋은 방법이 아니므로 S3에 이미지를 업로드하고 업로드가 완료된 링크를 src로 수정한다.</li>\n</ul>\n</li>\n</ol>\n<p>이 코드에 대한 더 자세한 사항은 따로 글을 작성할 예정이다.</p>","frontmatter":{"title":"NextJS 프로젝트에서 AWS S3에 이미지 저장하기","date":"August 13, 2024","description":"NextJS 프로젝트에서 AWS S3 클라우드 스토리지를 이용하여 이미지 다루기","tags":["NextJS","AWS S3"]}},"previous":{"fields":{"slug":"/2024/nextjs-authentication/"},"frontmatter":{"title":"NextJS 인증(authentication) 구현하기"}},"next":{"fields":{"slug":"/2024/nextjs-quill-editor/"},"frontmatter":{"title":"NextJS 프로젝트에서 Quill 에디터 사용하기"}}},"pageContext":{"id":"cadfe5f5-726e-5815-a19d-269f16f7bcfc","previousPostId":"38d1bd7e-285f-51da-98cd-dbf399fa0f1f","nextPostId":"7bd621e2-7ba2-5777-944e-8fc18965a7b7"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}