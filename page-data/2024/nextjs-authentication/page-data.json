{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024/nextjs-authentication/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"38d1bd7e-285f-51da-98cd-dbf399fa0f1f","excerpt":"이번 프로젝트를 하면서 인증 로직을 구현해야했는데 NextAuth V5(Auth.js)를 이용하여 인증 절차를 구현하였고 form은 react-hook-form 라이브러리를 이용하였다. 1. react-hook-form으로 form 작성하기 라이브러리를 이용하면 form…","html":"<p>이번 프로젝트를 하면서 인증 로직을 구현해야했는데 NextAuth V5(Auth.js)를 이용하여 인증 절차를 구현하였고 form은 react-hook-form 라이브러리를 이용하였다.</p>\n<h1>1. react-hook-form으로 form 작성하기</h1>\n<p><code class=\"language-text\">react-hook-form</code>라이브러리를 이용하면 form 제작을 좀 더 쉽게 할 수 있다고 하여 공부하고 싶었다. 그래서 이 라이브러리를 사용하여 form을 만들었는데... 처음 쓰는 라이브러리라 시작부터 난관이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token string\">'use client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SubmitHandler<span class=\"token punctuation\">,</span> useForm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-hook-form'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/navigation'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> StyledInput <span class=\"token keyword\">from</span> <span class=\"token string\">'@/app/components/UI/StyledInput'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'@/app/components/UI/Button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    register<span class=\"token punctuation\">,</span>\n    handleSubmit<span class=\"token punctuation\">,</span>\n    formState<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> errors <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    watch<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useForm</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>FormInput<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onSubmit<span class=\"token operator\">:</span> SubmitHandler<span class=\"token operator\">&lt;</span>FormInput<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> FormInput<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/auth/signup'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n        headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          username<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n          email<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n          password<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error during fetch:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>onSubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"flex flex-col\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"px-16 mb-2 flex flex-col justify-center items-center\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"flex flex-col w-full mb-3\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label className<span class=\"token operator\">=</span><span class=\"token string\">\"text-gray-400\"</span> htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token operator\">></span>\n            Username\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>StyledInput\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>username <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"username-error\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"error-message\"</span><span class=\"token operator\">></span>\n              Username <span class=\"token keyword\">is</span> required<span class=\"token punctuation\">.</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"flex flex-col my-3 w-full\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label className<span class=\"token operator\">=</span><span class=\"token string\">\"text-gray-400\"</span> htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span><span class=\"token operator\">></span>\n            Email\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>StyledInput\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> pattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\S+@\\S+$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>email <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"email-error\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"error-message\"</span><span class=\"token operator\">></span>\n              Email <span class=\"token keyword\">is</span> required and must include @<span class=\"token punctuation\">.</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"flex flex-col my-3 w-full\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label className<span class=\"token operator\">=</span><span class=\"token string\">\"text-gray-400\"</span> htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span><span class=\"token operator\">></span>\n            Password\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>StyledInput\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> minLength<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>password <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"password-error\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"error-message\"</span><span class=\"token operator\">></span>\n              Password <span class=\"token keyword\">is</span> required and must be at least <span class=\"token number\">6</span> characters long<span class=\"token punctuation\">.</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"flex flex-col mt-3 mb-6 w-full\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>label className<span class=\"token operator\">=</span><span class=\"token string\">\"text-gray-400\"</span> htmlFor<span class=\"token operator\">=</span><span class=\"token string\">\"confirmPassword\"</span><span class=\"token operator\">></span>\n            Confirm Password\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>StyledInput\n            id<span class=\"token operator\">=</span><span class=\"token string\">\"confirmPassword\"</span>\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'confirmPassword'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n              required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function-variable function\">validate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> value <span class=\"token operator\">||</span> <span class=\"token string\">'Passwords do not match.'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>confirmPassword <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"confirmPassword-error\"</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"error-message\"</span><span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>confirmPassword<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">...</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>form 자체는 useForm 훅을 이용하여 쉽게 만들 수 있었다.</p>\n<ul>\n<li><code class=\"language-text\">register</code> - input이나 select 태그에 유효성에 관한 옵션들을 넣을 수 있는 메서드</li>\n<li><code class=\"language-text\">formState</code> - 말 그대로 form state에 관한 정보</li>\n<li><code class=\"language-text\">watch</code> - 특정 input의 값을 추적할 수 있는 메서드</li>\n<li><code class=\"language-text\">handleSubmit</code> - form이 유효하다면 form data를 받아서 사용하는 함수</li>\n</ul>\n<p>주로 위 네 가지를 사용하였다.</p>\n<p>그리고 <code class=\"language-text\">NextAuth</code>라이브러리를 이용하여 인증을 시도했다. NextJS 공식 문서에서도 이 라이브러리를 쓰는 것을 권장하길래 사용해보았다.</p>\n<h1>2. NextAuth 설정 및 사용</h1>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> NextAuth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> NextAuthConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> GoogleProvider <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth/providers/google\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Credentials <span class=\"token keyword\">from</span> <span class=\"token string\">\"next-auth/providers/credentials\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> prisma <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/app/lib/prisma\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> PrismaAdapter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@auth/prisma-adapter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Prisma <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@prisma/client\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  adapter<span class=\"token operator\">:</span> <span class=\"token function\">PrismaAdapter</span><span class=\"token punctuation\">(</span>prisma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  session<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    strategy<span class=\"token operator\">:</span> <span class=\"token string\">\"jwt\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXTAUTH_SECRET</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"credentials\"</span><span class=\"token punctuation\">,</span>\n      credentials<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">authorize</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> credentials <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> email<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> credentials <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span>\n          email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n          password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> prisma<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">findUnique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            email<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User Not Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n          email<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n          image<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">,</span>\n          stickers<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>stickers <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  callbacks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 첫 로그인 시</span>\n        token<span class=\"token punctuation\">.</span>picture <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">;</span>\n        token<span class=\"token punctuation\">.</span>stickers <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>stickers<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trigger <span class=\"token operator\">===</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 세션 업데이트 시</span>\n        token<span class=\"token punctuation\">.</span>picture <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">;</span>\n        token<span class=\"token punctuation\">.</span>stickers <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>stickers<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>token<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>session<span class=\"token punctuation\">.</span>user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">,</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n        session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>email <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>picture<span class=\"token punctuation\">;</span>\n        session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>stickers <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>stickers <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> handlers<span class=\"token punctuation\">,</span> signIn<span class=\"token punctuation\">,</span> signOut<span class=\"token punctuation\">,</span> auth <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">NextAuth</span><span class=\"token punctuation\">(</span>authOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">authOptions</code>: NextAuth.js의 구성 옵션을 정의한 객체이다.</p>\n<h2>주요 구성 요소:</h2>\n<ol>\n<li><strong>adapter: PrismaAdapter(prisma)</strong>\n<ul>\n<li>Prisma를 사용하여 NextAuth에서 사용자 데이터 및 세션을 관리</li>\n</ul>\n</li>\n<li><strong>session: { strategy: 'jwt' }</strong>\n<ul>\n<li>세션 관리를 JWT(JSON Web Token) 방식으로 설정한다.</li>\n<li>세션 업데이트를 하기 위해 jwt 세션 전략을 선택했다.</li>\n</ul>\n</li>\n<li><strong>secret</strong>\n<ul>\n<li>JWT를 암호화하는 데 사용되는 비밀 키로, 환경 변수 <code class=\"language-text\">NEXTAUTH_SECRET</code>으로 설정된다.</li>\n</ul>\n</li>\n<li><strong>providers</strong>\n<ul>\n<li>인증에 사용할 제공자(providers) 목록</li>\n<li><strong>Credentials</strong>: 사용자 이메일과 비밀번호로 직접 인증을 처리한다. 여기서 <code class=\"language-text\">authorize</code> 메서드는 사용자의 자격 증명을 검증하고, 인증이 성공하면 사용자 객체를 반환한다.</li>\n</ul>\n</li>\n<li><strong>callbacks</strong>\n<ul>\n<li><code class=\"language-text\">jwt</code>: JWT 토큰이 생성되거나 업데이트될 때 호출된다.\n<ul>\n<li>사용자가 처음 로그인할 때 또는 세션이 업데이트될 때 사용자 정보를 토큰에 추가한다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">session</code>: 클라이언트 측에서 세션 정보에 접근할 때 호출된다.\n<ul>\n<li>사용자 세션 정보를 토큰 정보로부터 설정한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>여기서 조금 이해하기 어려웠던 것은 이렇게 설정하고 나서 사용자가 폼을 제출했을 때 'NextAuth가 어떤 로직을 따르는가'였다.\nNextAuth를 처음 써보기도 했고 Documentation에도 나와있지 않았기 때문에 직접 알아내야 했다.</p>\n<ol>\n<li>우선 <code class=\"language-text\">authorize</code> 함수가 먼저 실행된다.\n<ul>\n<li>인증에 성공하는 경우, 사용자 객체를 반환하고 <code class=\"language-text\">callbacks</code>를 실행한다.</li>\n<li>인증에 실패하는 경우, <code class=\"language-text\">null</code>이나 오류를 던지며 이 경우 <code class=\"language-text\">callbacks</code>를 실행하지 않는다.</li>\n</ul>\n</li>\n<li>그 후, <code class=\"language-text\">callbacks</code> 중 <code class=\"language-text\">jwt</code>가 실행된다.</li>\n<li><code class=\"language-text\">jwt</code>의 실행 이후, <code class=\"language-text\">session</code>이 실행된다.</li>\n</ol>\n<h2>callbacks</h2>\n<p>이번 프로젝트에서 직접 사용한 callback은 <code class=\"language-text\">jwt</code>, <code class=\"language-text\">session</code> 콜백이다. 두 콜백 모두 클라이언트 측에서 세션에 접근할 때 호출된다.</p>\n<h3>jwt callback</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 첫 로그인 시</span>\n\ttoken<span class=\"token punctuation\">.</span>picture <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">;</span>\n\ttoken<span class=\"token punctuation\">.</span>stickers <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>stickers<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trigger <span class=\"token operator\">===</span> <span class=\"token string\">'update'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 세션 업데이트 시</span>\n\ttoken<span class=\"token punctuation\">.</span>picture <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">;</span>\n\ttoken<span class=\"token punctuation\">.</span>stickers <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>stickers<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>token<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>session<span class=\"token punctuation\">.</span>user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ul>\n<li>user는 첫 로그인 시에만 전달되며 authorize에서 반환한 사용자 객체가 전달된다. <code class=\"language-text\">token.picture</code>에 사용자의 프로필 이미지(<code class=\"language-text\">user.image</code>)를 저장하고 <code class=\"language-text\">token.sticker = user.sticker</code> 구문을 이용해 사용자의 커스텀 스티커를 저장한다.</li>\n<li>trigger는 <code class=\"language-text\">signIn</code>, <code class=\"language-text\">signOut</code>, <code class=\"language-text\">update</code> 등이 설정될 수 있는데, 세션 업데이트 시 필요한 작업들이 있기 때문에 trigger가 update인 경우에 대한 구문을 추가하였다.\n<ul>\n<li>프로필 이미지와 스티커를 업데이트 하는 경우 세션 업데이트가 이루어지므로 이 정보들을 토큰에 반영한다.</li>\n</ul>\n</li>\n</ul>\n<h3>session callback</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">,</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">&amp;&amp;</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsession<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\tsession<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>email <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\tsession<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>picture<span class=\"token punctuation\">;</span>\n\tsession<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>stickers <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span>stickers <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<blockquote>\n<p>If you want to pass data such as an Access Token or User ID to the browser when using JSON Web Tokens, you can persist the data in the token when the <code class=\"language-text\">jwt</code> callback is called, then pass the data through to the browser in the <code class=\"language-text\">session</code> callback.</p>\n</blockquote>\n<ul>\n<li>Document에 따르면 JWT를 사용하여 데이터를 전달하고자 할 때, jwt 콜백에서 토큰에 데이터를 저장하고 session 콜백을 통해 브라우저에 데이터를 전달하라고 명시되어 있다.</li>\n<li>따라서 session 콜백에서는 token에 저장된 데이터를 세션에 반영하는 작업을 한다.</li>\n</ul>\n<p><a href=\"https://github.com/cozups/sticker-diary/blob/master/src/auth.ts\">NextAuth 설정 파일</a></p>\n<p>session update는 프로필 수정, 커스텀 스티커 수정 시 호출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> onSubmit<span class=\"token operator\">:</span> SubmitHandler<span class=\"token operator\">&lt;</span>EditFormInput<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n    data<span class=\"token operator\">:</span> EditFormInput\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 여러 가지 데이터를 DB에 update하는 로직</span>\n    <span class=\"token operator\">...</span>\n\n\t<span class=\"token comment\">// 세션 update 로직</span>\n    <span class=\"token keyword\">const</span> newSession <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>session<span class=\"token punctuation\">,</span>\n      user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>session<span class=\"token operator\">?.</span>user<span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n        image<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>newSession<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/cozups/sticker-diary/blob/master/src/app/profile/edit/page.tsx\">전체 코드</a></p>","frontmatter":{"title":"NextJS 인증(authentication) 구현하기","date":"July 27, 2024","description":"NextAuth V5(Auth.js)와 react-hook-form을 이용하여 사용자 인증 로직 구현하기","tags":["NextJS","NextAuth"]}},"previous":{"fields":{"slug":"/2024/nextjs-mdx/"},"frontmatter":{"title":"NextJS에서 mdx(markdown) 사용하기"}},"next":{"fields":{"slug":"/2024/nextjs=awsS3/"},"frontmatter":{"title":"NextJS 프로젝트에서 AWS S3에 이미지 저장하기"}}},"pageContext":{"id":"38d1bd7e-285f-51da-98cd-dbf399fa0f1f","previousPostId":"647092b9-3fe3-5d6b-867e-6bb81e401e62","nextPostId":"cadfe5f5-726e-5815-a19d-269f16f7bcfc"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}