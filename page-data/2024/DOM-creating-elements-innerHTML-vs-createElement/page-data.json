{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024/DOM-creating-elements-innerHTML-vs-createElement/","result":{"data":{"site":{"siteMetadata":{"title":"cozups-log"}},"markdownRemark":{"id":"c35ab3b8-820a-5685-8d43-599f3ec219bc","excerpt":"DOM 요소 속에 다른 요소를 추가하는 방법을 떠올렸을 때 을 이용하는 방법과 를 이용하는 방법이 떠오를 것이다. 이 두 가지의 차이는 무엇이 있는지, 무엇이 더 적절한 방법일지 궁금했다. 가독성 측면에서는 innerHTML…","html":"<p>DOM 요소 속에 다른 요소를 추가하는 방법을 떠올렸을 때 <code class=\"language-text\">innerHTML</code>을 이용하는 방법과 <code class=\"language-text\">createElement</code>를 이용하는 방법이 떠오를 것이다. 이 두 가지의 차이는 무엇이 있는지, 무엇이 더 적절한 방법일지 궁금했다. 가독성 측면에서는 innerHTML이 좋아보이는데 과연 효율성 측면에서는 이게 정말 좋은 방법일까?라는 생각이 들어 정리해보는 글이다.</p>\n<p><code class=\"language-text\">div</code> 태그 안에 새로운 <code class=\"language-text\">p</code> 요소를 넣는다고 생각해보자.</p>\n<h1>1. createElement 사용하기</h1>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  newElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1>2. innerHTML 사용하기</h1>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token string\">\"&lt;p>Hello, World!&lt;/p>\"</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>innerHTML이 더 적은 코드를 요구하기 때문에 간단해 보이지만, innerHTML을 이용하여 요소를 추가하면 div 속에 있는 모든 DOM 노드를 다시 분석하고 렌더링 하게 된다. 반면에 createElement를 사용하면 노드들을 파싱할 필요가 없기 때문에 더 효율적이다.</p>\n<h1>그러나 여러 개의 요소를 추가해야 한다면?</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Paragraph </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우에는 createElement를 이용하여 노드를 하나씩 추가하는 것보단 innerHTML을 이용하여 한 번에 여러 노드를 추가하는 것이 더 효율적일 수 있다.</p>\n<p>위 코드는 div 태그 안에 1000개의 p 태그를 추가하는 코드인데, 이 경우 1000개의 노드를 생성하고 1000번의 DOM 조작을 해야 한다. DOM 조작 자체가 비용이 큰 작업이기도 하고, 매번 요소가 추가될 때마다 브라우저는 reflow, repaint 작업을 거쳐야 하므로 굉장히 비효율적이다.\n그러나 createElement를 이용하여 여러 개의 노드를 한번에 추가하는 방법이 있다. <code class=\"language-text\">DocumentFragment</code>를 사용하는 것이다.</p>\n<h3>DocumentFragment</h3>\n<p>웹 문서의 메인 DOM 트리에 포함되지 않는, 가상 메모리에 존재하는 DOM 노드 객체이다.</p>\n<ol>\n<li>DocumentFragment로 루트 노드를 만든다.</li>\n<li>createElement로 만드는 여러 개의 노드를 child node로 추가한다.</li>\n<li>DocumentFragment를 DOM 트리에 붙인다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fragment <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Paragraph </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  fragment<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아까의 코드를 DocumentFragment를 이용하여 효율성을 개선한 코드이다.</p>\n<p>원래의 코드는 1000번의 reflow, repaint를 발생시켰지만 DocumentFragment는 실제 DOM에 존재하는 요소가 아니므로 어떠한 reflow, repaint도 발생시키지 않는다. 이 가상의 컨테이너 요소를 실제 DOM에 추가하면 DocumentFragment 안에 있는 요소들에 대하여 한꺼번에 한번의 reflow, repaint를 발생시킬 수 있다. 그리고 DocumentFragment 자체는 실제로 렌더링 되지 않으므로 불필요한 div 요소가 생기는 것을 방지할 수 있다.</p>\n<h1>결론</h1>\n<p>innerHTML과 createElement는 각각 장단점이 다르므로 어떤 방법이 더 효율적이라는 결론을 내기는 어렵다. 본인이 선호하는 방법을 사용하거나 상황에 따라 적절한 방법을 선택하는 것이 옳을 것으로 보인다.</p>","frontmatter":{"title":"DOM 요소 추가하기 - innerHTML vs createElement?","date":"August 21, 2024","description":"innerHTML와 createElement 중 어느 방법이 더 효율적일까?","tags":["DOM"]}},"previous":{"fields":{"slug":"/2024/nextjs-quill-editor/"},"frontmatter":{"title":"NextJS 프로젝트에서 Quill 에디터 사용하기"}},"next":{"fields":{"slug":"/2024/blog-deploy-with-ghpages/"},"frontmatter":{"title":"Gatsby 블로그 github pages로 배포하기 - ENAMETOOLONG 에러"}}},"pageContext":{"id":"c35ab3b8-820a-5685-8d43-599f3ec219bc","previousPostId":"7bd621e2-7ba2-5777-944e-8fc18965a7b7","nextPostId":"db6e32a5-156f-596d-b320-80030ed7e5c2"}},"staticQueryHashes":["230163734","2841359383"],"slicesMap":{}}